#!/usr/bin/python
# -*- coding: UTF-8 -*-

"""
some utils to deal with images
"""

from PIL import Image
from matplotlib import cm
import matplotlib.colors as mcolors
import matplotlib.pyplot as plt
import numpy as np
import cv2


def resize_image_innparray(data, width, height):
    """
    resize np.array(image)
    :param data: image in np.array
    :param width: width of image after resize
    :param height: height of image after resize
    :return: image after resize with new height and width
    """
    resized_image = cv2.resize(data, (width, height))
    return resized_image


def get_image_dpi(fname):
    """
    return image dpi
    :param fname: image file name
    :return: image dpi
    """
    image = Image.open(fname)
    return image.info['dpi'][0]


def get_cmap_jet_asarray():
    colormap_float = np.zeros((256, 3), np.float)
    for i in range(0, 256, 1):
        colormap_float[i, 0] = cm.jet(i)[0]
        colormap_float[i, 1] = cm.jet(i)[1]
        colormap_float[i, 2] = cm.jet(i)[2]

    return colormap_float


def change_cmap():
    colors = get_cmap_jet_asarray()
    for i in range(233, len(colors)):
        colors[i] = [1.0, 0.0, 0.0]

    cmap_name = 'my_list'
    cm = mcolors.LinearSegmentedColormap.from_list(cmap_name, colors, N=100)
    return cm


def image_add_with_certain_weight(foreground, background, alpha, cmap='hsv', verbose=False, save=None):
    """
    add foreground image (heatmap) with background image.
    :param foreground: foreground image in np.array
    :param background: background image in np.array
    :param alpha: heatmap = alpha * foreground_image + background_image
    :param cmap: About cmap , you can follow the link: https://matplotlib.org/3.1.0/tutorials/colors/colormaps.html
    :param verbose:
    :param save: where to save heatmap
    :return: void
    """


    fig = plt.figure(frameon=False)
    fig.set_size_inches(foreground.shape[1], foreground.shape[0])
    ax = plt.Axes(fig, [0., 0., 1., 1.])
    ax.set_axis_off()
    fig.add_axes(ax)
    ax.imshow(background)
    ax.imshow(255 * foreground, alpha=alpha, cmap=cmap)

    if save is not None:
        if verbose:
            print('save image: ' + save)
        fig.savefig(save, dpi=1, bbox_inches='tight', pad_inches=0)



