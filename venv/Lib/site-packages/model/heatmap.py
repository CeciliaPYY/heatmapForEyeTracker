#!/usr/bin/python
# -*- coding: UTF-8 -*-

import numpy as np
import scipy.stats as st
import cv2

class Heatmap:
    def __init__(self, original_data):
        self.original_data = original_data
        self.height = 0
        self.width = 0
        self.columns = 0
        self.rows = 0
        self.row_height = 0
        self.column_width = 0
        self.heatmap = None

    def __get_width_and_height(self):
        self.width = int(self.original_data['Width'])
        self.height = int(self.original_data['Height'])

    def __get_number_of_rows_and_columns(self):
        self.rows = int(self.original_data['Row'])
        self.columns = int(self.original_data['Col'])

    def __get_rowHeight_and_columnWidth(self):
        self.__get_width_and_height()
        self.__get_number_of_rows_and_columns()
        self.column_width, self.row_height = self.width / self.columns, self.height / self.rows

    def __generate_original_heatmap(self):
        self.__get_rowHeight_and_columnWidth()
        original_heatmap = np.zeros((self.height, self.width))
        for d in self.original_data['data']:
            x = int((d['x'] + 0.5) * self.column_width)
            y = int((4 - (d['y']) + 0.5) * self.row_height)
            value = d['value']
            original_heatmap[y][x] += value 

        return original_heatmap

    def __generate_original_heatmap_with_exact_coordinates(self):
        self.__get_rowHeight_and_columnWidth()
        original_heatmap = np.zeros((self.height, self.width))
        for d in self.original_data['data']:
            x = int(d['x'] + 0.5 * self.width)
            y = int(0.5 * self.height - d['y'])
            value = d['value']
            original_heatmap[y][x] += value
            
        return original_heatmap


    def __generate_gaussian_kernel(self, kernlen=100, nsig=3):
        """Returns a 2D Gaussian kernel."""

        x = np.linspace(-nsig, nsig, kernlen + 1)
        kern1d = np.diff(st.norm.cdf(x))
        kern2d = np.outer(kern1d, kern1d)
        return kern2d / kern2d.sum()

    def __blur_original_heatmap_with_gaussian_kernel(self, original_heatmap, gaussian_kernel):
        self.heatmap = cv2.filter2D(original_heatmap, -1, gaussian_kernel)

    def generate_heatmap(self):
        # originalHeatmap = self.__generate_original_heatmap()
        originalHeatmap = self.__generate_original_heatmap_with_exact_coordinates()
        gaussianKernel = self.__generate_gaussian_kernel()
        self.__blur_original_heatmap_with_gaussian_kernel(originalHeatmap, gaussianKernel)
        return self.heatmap
        
